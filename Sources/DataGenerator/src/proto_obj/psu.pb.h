// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: psu.proto

#ifndef PROTOBUF_psu_2eproto__INCLUDED
#define PROTOBUF_psu_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Hackers_Project {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_psu_2eproto();
void protobuf_AssignDesc_psu_2eproto();
void protobuf_ShutdownFile_psu_2eproto();

class psu_data;

// ===================================================================

class psu_data : public ::google::protobuf::Message {
 public:
  psu_data();
  virtual ~psu_data();

  psu_data(const psu_data& from);

  inline psu_data& operator=(const psu_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const psu_data& default_instance();

  void Swap(psu_data* other);

  // implements Message ----------------------------------------------

  psu_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const psu_data& from);
  void MergeFrom(const psu_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 energy_generated = 2;
  inline bool has_energy_generated() const;
  inline void clear_energy_generated();
  static const int kEnergyGeneratedFieldNumber = 2;
  inline ::google::protobuf::uint32 energy_generated() const;
  inline void set_energy_generated(::google::protobuf::uint32 value);

  // required string technology_required = 3;
  inline bool has_technology_required() const;
  inline void clear_technology_required();
  static const int kTechnologyRequiredFieldNumber = 3;
  inline const ::std::string& technology_required() const;
  inline void set_technology_required(const ::std::string& value);
  inline void set_technology_required(const char* value);
  inline void set_technology_required(const char* value, size_t size);
  inline ::std::string* mutable_technology_required();
  inline ::std::string* release_technology_required();
  inline void set_allocated_technology_required(::std::string* technology_required);

  // @@protoc_insertion_point(class_scope:Hackers_Project.psu_data)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_energy_generated();
  inline void clear_has_energy_generated();
  inline void set_has_technology_required();
  inline void clear_has_technology_required();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* technology_required_;
  ::google::protobuf::uint32 energy_generated_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_psu_2eproto();
  friend void protobuf_AssignDesc_psu_2eproto();
  friend void protobuf_ShutdownFile_psu_2eproto();

  void InitAsDefaultInstance();
  static psu_data* default_instance_;
};
// ===================================================================


// ===================================================================

// psu_data

// required string name = 1;
inline bool psu_data::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void psu_data::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void psu_data::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void psu_data::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& psu_data::name() const {
  return *name_;
}
inline void psu_data::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void psu_data::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void psu_data::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* psu_data::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* psu_data::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void psu_data::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 energy_generated = 2;
inline bool psu_data::has_energy_generated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void psu_data::set_has_energy_generated() {
  _has_bits_[0] |= 0x00000002u;
}
inline void psu_data::clear_has_energy_generated() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void psu_data::clear_energy_generated() {
  energy_generated_ = 0u;
  clear_has_energy_generated();
}
inline ::google::protobuf::uint32 psu_data::energy_generated() const {
  return energy_generated_;
}
inline void psu_data::set_energy_generated(::google::protobuf::uint32 value) {
  set_has_energy_generated();
  energy_generated_ = value;
}

// required string technology_required = 3;
inline bool psu_data::has_technology_required() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void psu_data::set_has_technology_required() {
  _has_bits_[0] |= 0x00000004u;
}
inline void psu_data::clear_has_technology_required() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void psu_data::clear_technology_required() {
  if (technology_required_ != &::google::protobuf::internal::kEmptyString) {
    technology_required_->clear();
  }
  clear_has_technology_required();
}
inline const ::std::string& psu_data::technology_required() const {
  return *technology_required_;
}
inline void psu_data::set_technology_required(const ::std::string& value) {
  set_has_technology_required();
  if (technology_required_ == &::google::protobuf::internal::kEmptyString) {
    technology_required_ = new ::std::string;
  }
  technology_required_->assign(value);
}
inline void psu_data::set_technology_required(const char* value) {
  set_has_technology_required();
  if (technology_required_ == &::google::protobuf::internal::kEmptyString) {
    technology_required_ = new ::std::string;
  }
  technology_required_->assign(value);
}
inline void psu_data::set_technology_required(const char* value, size_t size) {
  set_has_technology_required();
  if (technology_required_ == &::google::protobuf::internal::kEmptyString) {
    technology_required_ = new ::std::string;
  }
  technology_required_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* psu_data::mutable_technology_required() {
  set_has_technology_required();
  if (technology_required_ == &::google::protobuf::internal::kEmptyString) {
    technology_required_ = new ::std::string;
  }
  return technology_required_;
}
inline ::std::string* psu_data::release_technology_required() {
  clear_has_technology_required();
  if (technology_required_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = technology_required_;
    technology_required_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void psu_data::set_allocated_technology_required(::std::string* technology_required) {
  if (technology_required_ != &::google::protobuf::internal::kEmptyString) {
    delete technology_required_;
  }
  if (technology_required) {
    set_has_technology_required();
    technology_required_ = technology_required;
  } else {
    clear_has_technology_required();
    technology_required_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Hackers_Project

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_psu_2eproto__INCLUDED
